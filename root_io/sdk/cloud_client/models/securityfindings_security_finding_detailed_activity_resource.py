# coding: utf-8

"""
    Root.io API

    This is the API documentation for Root.io.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from root_io.sdk.cloud_client.models.entities_finding_status import EntitiesFindingStatus
from root_io.sdk.cloud_client.models.entities_resolution import EntitiesResolution
from typing import Optional, Set
from typing_extensions import Self

class SecurityfindingsSecurityFindingDetailedActivityResource(BaseModel):
    """
    SecurityfindingsSecurityFindingDetailedActivityResource
    """ # noqa: E501
    account_id: Optional[StrictStr] = None
    account_name: Optional[StrictStr] = None
    activity: Optional[StrictStr] = None
    comment: Optional[StrictStr] = None
    comment_id: Optional[StrictStr] = None
    comment_parent_id: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    new_status: Optional[EntitiesFindingStatus] = Field(default=None, description="Activity specific")
    old_status: Optional[EntitiesFindingStatus] = None
    resolution: Optional[EntitiesResolution] = None
    __properties: ClassVar[List[str]] = ["account_id", "account_name", "activity", "comment", "comment_id", "comment_parent_id", "created_at", "new_status", "old_status", "resolution"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecurityfindingsSecurityFindingDetailedActivityResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecurityfindingsSecurityFindingDetailedActivityResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_id": obj.get("account_id"),
            "account_name": obj.get("account_name"),
            "activity": obj.get("activity"),
            "comment": obj.get("comment"),
            "comment_id": obj.get("comment_id"),
            "comment_parent_id": obj.get("comment_parent_id"),
            "created_at": obj.get("created_at"),
            "new_status": obj.get("new_status"),
            "old_status": obj.get("old_status"),
            "resolution": obj.get("resolution")
        })
        return _obj


